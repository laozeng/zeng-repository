<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" id="WebApp_ID" version="3.1">
  <!-- web.xml 的加载顺序是：context-param -> listener -> filter -> servlet -->
  <display-name>ssh</display-name>
  <welcome-file-list>
  <!-- 
  	以下三种方案，都可以(加不加项目名称都行)，其中第二种方案最好，因为路径后面没有带方法名称(注意：如果welcome-file-list中没有配置的话，web容器还会在Servers/web.xml中找)
    1.先跳转到WebContent之下的index.jsp页面，然后再通过js手段实现跳转(*.mvc 或者 /都行)
    2.直接跳转到控制器中(*.mvc才行)
    3.先跳转到servlet中，然后再通过重定向到控制器中(*.mvc才行)
    4.直接跳转到你要显示的默认首页面去(还要在spring.xml中配置：<mvc:view-controller path="/" view-name="index/index"/>) ( / 才行)
    5.如果没有以上的话，那么可以配置一个  / 的控制器，和一个 / 的方法，web容器会自动找到它 ( / 才行)
  -->
<!--     <welcome-file>index.jsp</welcome-file> -->
    <welcome-file>/index/indexUI.mvc</welcome-file>
<!--     <welcome-file>index</welcome-file> -->
<!--     <welcome-file></welcome-file> -->
  </welcome-file-list>
  
  <!-- 配置servlet监听器 -->
  <listener>
  	<listener-class>com.listener.MyListener</listener-class>
  </listener>
  
  <context-param>
  	<param-name>contextConfigLocation</param-name>
  	<param-value>classpath:applicationContext.xml</param-value>
  </context-param>
  <listener>
	 <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  
  <!-- 普通的servlet控制器 -->
  <servlet>
  	<servlet-name>FreeMarkerServlet</servlet-name>
  	<servlet-class>com.freemarker.FreeMarkerServlet</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>FreeMarkerServlet</servlet-name>
  	<url-pattern>/FreeMarkerServlet</url-pattern>
  </servlet-mapping>
  <servlet>
  	<servlet-name>IndexServlet</servlet-name>
  	<servlet-class>com.servlet.IndexServlet</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>IndexServlet</servlet-name>
  	<url-pattern>/index</url-pattern>
  </servlet-mapping> 
  
  <!-- 不拦截静态资源(此处说的不拦截是指不让静态资源的请求经过doFilter()方法) -->
  <!-- <servlet-mapping>
  	<servlet-name>default</servlet-name>
  	<url-pattern>/js/*</url-pattern>
  </servlet-mapping> -->
  <!-- 系统核心过滤器(自定义,该配置必须放在Struts2过滤器的前面) -->
  <filter>
  	<filter-name>systemFilter</filter-name>
  	<filter-class>com.filter.SystemFilter</filter-class>
  	<init-param>
  		<param-name>charset</param-name>
  		<param-value>utf-8</param-value>
  	</init-param>
  	<init-param>
  		<param-name>name</param-name>
  		<param-value>杆子</param-value>
  	</init-param>
  </filter>
  <filter-mapping>
  	<filter-name>systemFilter</filter-name>
  	<url-pattern>/*</url-pattern>
  	<dispatcher>REQUEST</dispatcher>
  	<dispatcher>FORWARD</dispatcher>
  </filter-mapping>
  
 <!-- springmvc核心控制器 -->
  <servlet>
  	<servlet-name>ssh</servlet-name>
  	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
  	<load-on-startup>1</load-on-startup>
  	<init-param>
  		<param-name>contextConfigLocation</param-name>
	<param-value>/WEB-INF/classes/applicationContext*.xml</param-value>
  	</init-param> 
  	 <!-- web容器启动的同时，初始化spring配置，值越小启动的时机越早
   	说明：如果测试时可以不配置该项，如果配置了会延缓web容器的启动时间，
   	如果正式发布了项目可以配置该项，因为那样会延缓打开页面的时间
    -->
 <!--<load-on-startup>0</load-on-startup> -->
   </servlet>
   <servlet-mapping>
   	<servlet-name>ssh</servlet-name>
   	<url-pattern>*.mvc</url-pattern>
<!--    	<url-pattern>/</url-pattern> -->
  </servlet-mapping>
  
   <context-param>
	<param-name>webAppRootKey</param-name>
	<param-value>ssh.root</param-value>
</context-param>
<listener>
	<listener-class>org.springframework.web.util.WebAppRootListener</listener-class>
</listener>

  <!-- dwr配置 -->
  <servlet>
  	<servlet-name>dwrServlet</servlet-name>
  	<servlet-class>uk.ltd.getahead.dwr.DWRServlet</servlet-class>
  	<!-- 解决session error的问题 -->
  	<init-param>
	    <param-name>crossDomainSessionSecurity</param-name>
	    <param-value>false</param-value>
    </init-param>
  	<!-- tomcat服务器启动时，初始化dwrServlet这个servlet -->
  	<load-on-startup>0</load-on-startup>
  </servlet>
  <servlet-mapping>
  	<servlet-name>dwrServlet</servlet-name>
	<url-pattern>/dwr/*</url-pattern>
  </servlet-mapping>
  
  <!-- spring字符过滤器 -->
  <filter>
  	<filter-name>springFilter</filter-name>
  	<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
  	<init-param>
  		<param-name>encoding</param-name>
  		<param-value>UTF-8</param-value>
  	</init-param>
  </filter>
  <filter-mapping>
  	<filter-name>springFilter</filter-name>
  	<url-pattern>/*</url-pattern>
  </filter-mapping>
  
  <!-- shiro过滤器配置,该配置必不可少，否则shiro不会起作用 -->
  <filter>
  	  <filter-name>shiroFilter</filter-name>
  	  <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
  </filter>
  <filter-mapping>
     <filter-name>shiroFilter</filter-name>
  	 <url-pattern>/*</url-pattern>
  </filter-mapping>
  
  <!-- 注意：在struts2的架构之下，以下语句没有发挥作用 -->
  <!-- 注意：在springmvc模式之下会发挥作用 -->
   <!-- <error-page>
    <error-code>404</error-code>
    <location>/WEB-INF/spring-exception/404.jsp</location>
  </error-page>
  <error-page>
    <error-code>500</error-code>
    <location>/WEB-INF/spring-exception/500.jsp</location>
  </error-page>  -->
  
  <!-- 初始化log4j配置文件(tomcat服务器启动时) -->
  <!-- <context-param>
  	<param-name>log4jConfigLocation</param-name>
  	<param-value>classpath:log4j.properties</param-value>
  </context-param> -->
</web-app>